#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>

//库函数
//#include<string.h>
//int main()
//{
//	char arr1[] = { "bit" };
//	char arr2[20] = { "########" };
//	strcpy(arr2, arr1);		//字符串复制函数
//	printf("%s", arr2);
//	return 0;
//}

//#include<string.h>
//int main()
//{
//	char arr[] = "hello world";
//	memset(arr, '*', 5);		//memory set 内存设置函数，将arr的前5个字符用'*'代替
//	printf("%s\n", arr);
//
//	return 0;
//}


////自定义函数
////设计一个函数实现交换两个数字
//void swap(int* x, int* y)		//用指针x和y储存a和b的地址
//{
//	int temp = 0;
//	temp = *x;		//*x表示通过指针x中的地址找到a的值，移动到temp中
//	*x = *y;
//	*y = temp;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	printf("a=%d  b=%d\n", a, b);
//	swap(&a, &b);		//将地址传入swap函数中
//	printf("a=%d  b=%d\n", a, b);
//	return 0;
//}


////写一个函数可以判断一个数是不是素数
//#include<math.h>
//
//int sushu(int n)
//{
//	int i = 0;
//	for (i = 2; i <=sqrt(n); i++)
//	{
//			if (n % i == 0)
//			{
//				return 0;
//				break;
//			}
//	}
//	return 1;
//}
//int main()
//{
//	int n = 0;
//	int temp = 0;
//	scanf("%d", &n);
//	temp = sushu(n);
//	if (temp == 0)
//	{
//		printf("不是素数\n");
//	}
//	if(temp == 1)
//	{
//		printf("是素数\n");
//	}
//	return 0;
//}

//#include"add.h"		//调用头文件add.h		//实现函数的分装
//int main()
//{
//	int a = 0;
//	int b = 0;
//	scanf("%d%d",&a,&b);
//	int sum = add(a, b);
//	printf("%d\n", sum);
//	return 0;
//}
//add头文件：int add(int, int);
//add源文件：
// int add(int x, int y)
//{
//int z = x + y;
//return z;
//}



//函数递归
//1.接受一个整型值，按照顺序打印它的每一位。例如：输入1234，输出1 2 3 4 。

//void print(int x)
//{
//	if (x > 9)
//	{
//		print(x / 10);		//递归调用：递归应该有限制条件，且每一次递归都应该跟限制条件越来越近
//	}
//	printf("%d  ", x % 10);
//}
//int main()
//{
//	int num = 0;
//	scanf("%d", &num);
//	print(num);
//	return 0;
//}


//2.自己写一个函数计算字符串长度

//int len_char(char* str)		//数组传的是第一个字符的首地址，所以应该用char指针
//{
//	int n = 0;
//	while(*str != '\0')
//	{
//		if (*str != ' ')
//		{
//			n++;		//计数器
//		}
//		str++;
//	}
//	return n;
//}
//
//int main()
//{
//	char arr[] ="hello world";
//	int len = 0;
//	len = len_char(arr);		//通过自定义函数求字符串长度
//	printf("len=%d\n", len);
//	return 0;
//}

//递归问题
//1.汉诺塔问题
//2.青蛙跳台阶问题（n个台阶，一次可以挑一个台阶，一次也可以跳两个台阶，问跳到第n个台阶有多少种跳法？）

////1.汉诺塔问题的解决
//
//void move(char x, char y)
//{
//	printf("%c->%c\n", x, y);
//}
//void HanoiTower(char A, char B, char C, int n)
//{
//	if (n == 1)
//	{
//		move(A,C);
//	}
//	else
//	{
//		HanoiTower(A, C, B, n - 1);
//		move(A, C);
//		HanoiTower(B, A, C, n - 1);
// 
//	}
//}
//int main()
//{
//	int n = 0;
//	scanf("%d", &n);
//	HanoiTower('A','B','C',n);
//	return 0;
//}

//2.青蛙跳台阶问题（n个台阶，一次可以挑一个台阶，一次也可以跳两个台阶，问跳到第n个台阶有多少种跳法？）

//#include<stdio.h>
////求第n级台阶时青蛙跳法个数
//int frog_jump_step(int n)
//{
//	//特殊情况处理
//	if (n == 1)
//	{
//		return 1;
//	}
//	if (n == 2)
//	{
//		return 2;
//	}
//	//递归调用
//	return frog_jump_step(n - 1) + frog_jump_step(n - 2);
//}
//int main()
//{
//	int n = 0;
//	printf("请输入青蛙所要跳的台阶数：");
//	scanf("%d", &n);
//	int num = frog_jump_step(n);
//	printf("一共有%d种跳法\n", num);
//	return 0;
//}
