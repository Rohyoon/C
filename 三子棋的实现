//头文件
#define ROW 3
#define COL 3
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
//声明
void InitBoard(char board[ROW][COL], int row, int col);
void DisplayBoard(char board[ROW][COL], int row, int col);
void PlayerMove(char board[ROW][COL], int row, int col);
void ComputerMove(char board[ROW][COL], int row, int col);
char IsWin(char board[ROW][COL], int row, int col);
int IsFull(char board[ROW][COL], int row, int col);

//游戏棋盘的实现
#define _CRT_SECURE_NO_WARNINGS 1
#include"game1.h"
void InitBoard(char board[ROW][COL], int row, int col)
{
        int i = 0;
        int j = 0;
        for (i = 0; i < row; i++)
        {
               for (j = 0; j < col; j++)
               {
                       board[i][j] = ' ';
               }
        }
}
//void DisplayBoard(char board[ROW][COL], int row, int col)
//{
//      int i = 0;
//      for (i = 0; i < row; i++)
//      {
//             //1.打印数据
//             printf(" %c | %c | %c \n", board[i][0], board[i][1], board[i][0]);
//             //2.打印分隔符
//             if(i<row-1)
//             printf("---|---|---\n");
//      }
//}
void DisplayBoard(char board[ROW][COL], int row, int col)
{
        int i = 0;
        int j = 0;
        //1.打印数据
        for (i = 0; i < row; i++)
        {
               for (j = 0; j < col; j++)
               {
                       printf(" %c ", board[i][j]);
                       if (j < col - 1)
                       {
                              printf("|");
                       }
               }
               printf("\n");
               for (j = 0; j < col; j++)
               {
                       if(i<row-1)
                              printf("---");
                       
                       if (j < col - 1)
                       {
                              printf("|");
                       }
               }
               printf("\n");
        }
}

//主程序
#define _CRT_SECURE_NO_WARNINGS 1
#include"game1.h"
void menu()
{
        printf("1.开始三子棋游戏   2.退出游戏 \n");
}
void game1()
{
        char ret = 0;
        char board[ROW][COL] = { 0 };         //数组，存放棋盘信息,定义数组的行和列
        //初始化棋盘
        InitBoard(board, ROW, COL);
        //打印棋盘
        DisplayBoard(board,ROW,COL);
        //玩家下棋
        while (1)
        {
               //玩家下棋
               PlayerMove(board,ROW,COL);
               DisplayBoard(board, ROW, COL);
               //判断玩家是否赢
               ret = IsWin(board,ROW,COL);
               if (ret != 'C')
               {
                       break;
               }
               else if (ret=='*')
               {
                       printf("玩家获胜！\n");
               }
               else if (ret=='#')
               {
                       printf("电脑获胜！\n");
               }
               else
               {
                       printf("平局。\n");
               }
               //电脑下棋
               ComputerMove(board, ROW, COL);
               DisplayBoard(board, ROW, COL);
               //判断电脑是否赢
               ret = IsWin(board, ROW, COL);
        }
}
void prepare()
{
        int input = 0;
        srand((unsigned int)time(NULL));
        do
        {
        menu();
        printf("请选择：\n");
        scanf("%d", &input);
        switch (input)
        {
        case 1:
               game1();
               break;
        case 2:
               printf("退出游戏\n");
               break;
        default:
               printf("输入错误，请重新选择：\n");
               break;
        }
        } while (input!=2);
 }
int main()
{
        prepare();
        return 0;
}
void PlayerMove(char board[ROW][COL], int row, int col)
{       
        int x = 0;
        int y = 0;
        while (1)
        {
               printf("玩家输入想走坐标：\n");
               scanf("%d%d", &x, &y);
               //判断x，y的合法性
               if (x >= 1 && x <= row && y >= 1 && y <= col)
               {
                       if (board[x - 1][y - 1] == ' ')
                       {
                              board[x - 1][y - 1] = '*';
                              break;
                       }
                       else
                       {
                              printf("该坐标已经被占用\n");
                       }
               }
               else
               {
                       printf("非法输入，请重新输入：\n");
               }
        }
        
}
void ComputerMove(char board[ROW][COL], int row, int col)
{
        int x = 0;
        int y = 0;
        printf("电脑走：\n");
        while (1)
        {
               x = rand() % row;
               y = rand() % col;
               if (board[x][y] == ' ')
               {
                       board[x][y] = '#';
                       break;
               }
        }
}
//返回1表示棋盘满了
//返回0表示棋盘没满
int IsFull(char board[ROW][COL], int row, int col)
{
        int i = 0;
        int j = 0;
        for (i = 0; i < row; i++)
        {
               for (j = 0; j < col; j++)
               {
                       if (board[i][j] == ' ')
                       {
                              return 0;//没满
                       }
               }
        }
        return 1;//满了
}
char IsWin(char board[ROW][COL], int row, int col)
{
        int i = 0;
        //横row行
        for (i = 0; i < row; i++)
        {
               if (board[i][0] == board[i][1] && board[i][1] == board[i][2]&&board[i][0]!=' ')
               {
                       return board[i][0];
               }
        }
        //竖col列
        for (i = 0; i < col; i++)
        {
               if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != ' ')
               {
                       return board[0][i];
               }
        }
        //两个对角线
        if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != ' ')
               return board[0][0];
        if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != ' ')
               return board[0][2];
        //判断是否平局
        if (IsFull(board, ROW, COL) == 1)
        {
               return 'Q';
        }
        return 'C';
}
